# Nginx configuration to create a devstack for NAU WordPress
# https://www.nginx.com/resources/wiki/start/topics/recipes/wordpress/
worker_processes 1;

events { worker_connections 1024; }

http {

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    # Enable gzip compression.
    # Default: off
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and CPU usage, offering about
    # 75% reduction for most ASCII files (almost identical to level 9).
    # Default: 1
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    # Default: 20
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    # Default: off
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    # Default: off
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    # text/html is always compressed by gzip module.
    # Default: text/html
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    # This should be turned on if you are going to have pre-compressed copies (.gz) of
    # static files available. If not it should be left off as it will cause extra I/O
    # for the check. It is best if you enable this in a location{} block for
    # a specific directory, or on an individual server{} level.
    # gzip_static on;


    upstream php {
        server wordpress:9000;
    }

    client_max_body_size 100M;

    # map directly
    root /var/www/html;
    index index.php;

    charset utf-8;

    server {
        listen 80;
        server_name localhost;

        access_log /var/log/nginx/access.log compression;

        location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml|svg)$ {
            access_log        off;
            log_not_found     off;
            expires           30d;
        }

        open_file_cache          max=2000 inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;
        
        #enable font loading from different domains
        location ~* \.(ttf|otf|eot|woff|woff2|svg)$ {
            add_header Access-Control-Allow-Origin *;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
       
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;

            # return robots.txt inline
            add_header Content-Type text/plain;
            return 200
'User-agent: *
Disallow: /wp-admin/
Allow: /wp-admin/admin-ajax.php
Sitemap: $scheme://$host/sitemap_index.xml';
        }

        # Rewrites for Yoast SEO XML Sitemap
        rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
        rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;
        #Yoast SEO Sitemaps
        location ~ ([^/]*)sitemap(.*).x(m|s)l$ {
          ## this rewrites sitemap.xml to /sitemap_index.xml
          rewrite ^/sitemap.xml$ /sitemap_index.xml permanent;
          ## this makes the XML sitemaps work
          rewrite ^/([a-z]+)?-?sitemap.xsl$ /index.php?yoast-sitemap-xsl=$1 last;
          rewrite ^/sitemap_index.xml$ /index.php?sitemap=1 last;
          rewrite ^/([^/]+?)-sitemap([0-9]+)?.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;
          ## The following lines are optional for the premium extensions
          ## News SEO
          rewrite ^/news-sitemap.xml$ /index.php?sitemap=wpseo_news last;
          ## Local SEO
          rewrite ^/locations.kml$ /index.php?sitemap=wpseo_local_kml last;
          rewrite ^/geo-sitemap.xml$ /index.php?sitemap=wpseo_local last;
          ## Video SEO
          rewrite ^/video-sitemap.xsl$ /index.php?yoast-sitemap-xsl=video last;
        }

        location = /.htaccess {
            deny all;
        }

        location / {
            # This is cool because no php is touched for static content. 
            # include the "?$args" part so non-default permalinks doesn't break when using query string
            try_files $uri $uri/ /index.php?$args;
        }

        location ~ \.php$ {
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            if (!-f $document_root$fastcgi_script_name) {
            return 404;
            }
            # Mitigate https://httpoxy.org/ vulnerabilities
            fastcgi_param HTTP_PROXY "";
            fastcgi_pass php;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            fastcgi_intercept_errors on;
        }

    }

}
